With IBM® Cloud Functions you can use you can use your favorite programming language to write lightweight code that executes app logic in a scalable way. You can run code on-demand with HTTP-based API requests from applications or automatically in response to IBM Cloud services and third-party events. The Function-as-a-Service (Faas) programming platform is based on the open source project Apache OpenWhisk.

Because Cloud Functions is serverless, you're not limited in the languages that you can use and you don't have to spend time explicitly provisioning backend infrastructure. You can focus on writing app logic instead of worrying about auto-scaling, high availability, updates, or maintenance. Out of the box, IBM provides the hardware, networking, software administration, load balancing, plugins, and so on. 
Despite their benefit, microservice-based solutions remain difficult to build by using mainstream cloud technologies, often requiring control of a complex toolchain, and separate build and operations pipelines. Small and agile teams spend too much time with infrastructural and operational complexities such as fault-tolerance, load balancing, auto-scaling, and logging. These teams want a way to develop streamlined, value-added code with programming languages they already know, love, and that are best suited to solve particular problems.

The modular and inherently scalable nature of Cloud Functions makes it ideal for implementing granular pieces of logic in actions. Cloud Functions actions are independent of each other and can be implemented by using various different languages that are supported by Cloud Functions and access various backend systems. Each action can be independently deployed and managed, is scaled independently of other actions. Interconnectivity between actions is provided by Cloud Functions in the form of rules, sequences, and naming conventions. This type of environment bodes well for microservices based applications.

Another important argument in favor of Cloud Functions is the cost of a system in a disaster recovery configuration. Compare microservices with PaaS or CaaS vs. using Cloud Functions by assuming that you have 10 microservices, which use containers or CloudFoundry runtimes. This comparison equates to 10 continuously running and billable processes in a single availability zone, 20 when run across 2 AZs, and 40 when run across two regions with two zones each. To achieve the same goal with Cloud Functions, you can run them across as many AZs or regions as you like, without having to pay a penny of incremental costs.